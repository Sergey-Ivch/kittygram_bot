from telegram import Update
import requests
import logging
from telegram.ext import Updater, CallbackContext, MessageHandler, CallbackQueryHandler, CommandHandler, Filters
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from typing import List, Dict

updater = Updater(token='7814399961:AAEt7Wwo80daNL2tL07k3GzHuey-_sP97cc')
URL = "https://testhome.pythonanywhere.com/api/cats/"


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - —ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger(__name__) # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è


BREEDS_PER_PAGE = 10

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
WELCOME_MESSAGE = (
    "–ü—Ä–∏–≤–µ—Ç! {} üëã\n\n"
    "–Ø - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç!\n\n"
    "–ú–µ—á—Ç–∞–µ—à—å –æ –ø—É—à–∏—Å—Ç–æ–º –¥—Ä—É–≥–µ, –Ω–æ –Ω–µ –∑–Ω–∞–µ—à—å, –∫–∞–∫–∞—è –ø–æ—Ä–æ–¥–∞ –∫–æ—à–µ–∫ –ø–æ–¥–æ–π–¥–µ—Ç –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ? üòª\n\n"
    "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä!\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"
    " –æ —Å–≤–æ–µ–º –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö, –∏ —è –ø–æ–¥–±–µ—Ä—É –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ—Ç–∞ –¥–ª—è —Ç–µ–±—è. ‚ú®\n\n"
    "–ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, –∏ –º—ã –Ω–∞–π–¥–µ–º —Ç–≤–æ–µ–≥–æ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ—Ç–∞! üêæ\n\n"
    '–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º –º–µ–Ω—é –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å"'
)

MAIN_KEYBOARD = ReplyKeyboardMarkup(
    [['–í—Å–µ –ø–æ—Ä–æ–¥—ã', '–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –æ–± —É—Ö–æ–¥–µ'], ['–ù–∞—á–∞—Ç—å']], resize_keyboard=True
)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã - –≤—ã–Ω–æ—Å–∏–º –∏—Ö –∑–∞ —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã –Ω–µ –≤—ã—á–∏—Å–ª—è—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑
LITTLE_MIN_WEIGHT = 2.5
LITTLE_MAX_WEIGHT = 4.0
AVERAGE_MIN_WEIGHT = 4.0
AVERAGE_MAX_WEIGHT = 5.5
LARGE_MIN_WEIGHT = 5.5
LARGE_MAX_WEIGHT = 9.0

ST_MIN_LIFE_EXPECTANCY = 0.0
ST_MAX_LIFE_EXPECTANCY = 13.75
DO_MIN_LIFE_EXPECTANCY = 13.75
DO_MAX_LIFE_EXPECTANCY = 20.0

QUESTIONS: Dict[int, Dict[str, any]] = {
    1: {
        "text": "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞–ª–ª–µ—Ä–≥–∏—è –Ω–∞ –∫–æ—à–µ–∫, –∏–ª–∏ –∫—Ç–æ-—Ç–æ –≤ —Å–µ–º—å–µ –∞–ª–ª–µ—Ä–≥–∏–∫?",
        "answers": ["1.–ù–µ—Ç –∞–ª–ª–µ—Ä–≥–∏–∏", "2.–ï—Å—Ç—å –∞–ª–ª–µ—Ä–≥–∏—è"],
        "callback_values": {"no_allergic": "–ù–µ—Ç –∞–ª–ª–µ—Ä–≥–∏–∏", "allergic": "–ê–ª–ª–µ—Ä–≥–∏—è"},
    },
    2: {
        "text": "–í –∫–∞–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö –±—É–¥–µ—Ç –∂–∏—Ç—å –≤–∞—à–∞ –∫–æ—à–∫–∞?",
        "answers": ["1.–¢–æ–ª—å–∫–æ –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏", "2.–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ —É–ª–∏—Ü—É", "3.–°–≤–æ–±–æ–¥–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ —É–ª–∏—Ü—É"],
        "callback_values": {"Indoor_only": "–ü–æ–º–µ—â–µ–Ω–∏–µ", "Limited_access": "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π", "Free_access": "–°–≤–æ–±–æ–¥–Ω—ã–π"},
    },
    3: {
        "text": "–í –∫–∞–∫–æ–º –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ?",
        "answers": ["1.–ì–æ—Ä–æ–¥", "2.–ü—Ä–∏–≥–æ—Ä–æ–¥", "3.–î–µ—Ä–µ–≤–Ω—è"],
        "callback_values": {"City": "–ì–æ—Ä–æ–¥", "Suburb": "–ü—Ä–∏–≥–æ—Ä–æ–¥", "Village": "–î–µ—Ä–µ–≤–Ω—è"},
    },
    4: {
        "text": "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å —É—Ö–æ–¥—É –∑–∞ —à–µ—Ä—Å—Ç—å—é –∫–æ—Ç–∞?",
        "answers": ["1.–ú–∏–Ω–∏–º—É–º (—Ä–µ–¥–∫–æ–µ —Ä–∞—Å—á–µ—Å—ã–≤–∞–Ω–∏–µ, –º–∏–Ω–∏–º—É–º —É—Ö–æ–¥–∞)", "2.–ú–Ω–æ–≥–æ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–∞—Å—á–µ—Å—ã–≤–∞–Ω–∏–µ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥—Ä—É–º–∏–Ω–≥)"],
        "callback_values": {"min_grooming": "–ë–∞–∑–æ–≤—ã–π", "med_grooming": "–†–µ–≥—É–ª—è—Ä–Ω—ã–π"},
    },
    5: {
        "text": "–ù–∞—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—Ç–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ?",
        "answers": ["1.–ê–∫—Ç–∏–≤–Ω–æ–≥–æ (–ª—é–±–∏—Ç –∏–≥—Ä–∞—Ç—å, –º–Ω–æ–≥–æ –¥–≤–∏–≥–∞–µ—Ç—Å—è)", "2.–°–ø–æ–∫–æ–π–Ω–æ–≥–æ (–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –æ—Ç–¥—ã—Ö–∞—Ç—å)"],
        "callback_values": {"very_active": "–ê–∫—Ç–∏–≤–Ω—ã–π", "calm": "–°–ø–æ–∫–æ–π–Ω—ã–π"},
    },
    6: {
        "text": "–ö–∞–∫–æ–π –≤–µ—Å –∫–æ—Ç–∞ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏?",
        "answers": ["1.–ú–∞–ª–µ–Ω—å–∫–∏–π (2.5 - 4.0 –∫–≥)", "2.–°—Ä–µ–¥–Ω–∏–π (4.0 - 5.5 –∫–≥)", "3.–ö—Ä—É–ø–Ω—ã–π (5.5 - 9.0 –∫–≥)"],
        "callback_values": {"Little": "Little", "Average": "Average", "Large": "Large"},
    },
    7: {
        "text": "–ö–∞–∫—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏ –∫–æ—Ç–∞ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏?",
        "answers": ["1.–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è", "2.–î–æ–ª–≥–æ–∂–∏—Ç–µ–ª—å"],
        "callback_values": {"10": "Ten", "10_15": "Ten-five"},
    },
}

FORMATTED_VALUES: List[str] = []

def fetch_cat_data(url: str) -> List[Dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–æ—à–∫–∞—Ö –∏–∑ API.

    Args:
        url: URL API.

    Returns:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–æ—à–∫–∞—Ö.  –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    try:
        response = requests.get(url)
        response.raise_for_status()  # Raise HTTPError for bad responses (4xx or 5xx)
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        return []  #  –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–µ –¥–∞–ª—å—à–µ


def filter_cats(cat_data: List[Dict], formatted_values: List[str]) -> List[Dict]:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–æ—à–∫–∞—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤.

    Args:
        cat_data: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–æ—à–∫–∞—Ö.
        formatted_values: –°–ø–∏—Å–æ–∫ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (care, activity, size, life_expectancy).

    Returns:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–æ—à–∫–∞—Ö.
    """

    care = formatted_values[3]
    activity = formatted_values[4]
    size = formatted_values[5]
    life_expectancy_group = formatted_values[6]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –≤–µ—Å–∞ –∫–æ—à–∫–∏
    if size == "Little":
        min_value = LITTLE_MIN_WEIGHT
        max_value = LITTLE_MAX_WEIGHT
    elif size == "Average":
        min_value = AVERAGE_MIN_WEIGHT
        max_value = AVERAGE_MAX_WEIGHT
    else:  # Implicitly handles "Large" or any other value
        min_value = LARGE_MIN_WEIGHT
        max_value = LARGE_MAX_WEIGHT

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∂–∏–∑–Ω–∏
    if life_expectancy_group == 'Ten':
        mini_value = ST_MIN_LIFE_EXPECTANCY
        maxi_value = ST_MAX_LIFE_EXPECTANCY
    elif life_expectancy_group == 'Ten-five':
        mini_value = DO_MIN_LIFE_EXPECTANCY
        maxi_value = DO_MAX_LIFE_EXPECTANCY
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∂–∏–∑–Ω–∏: {life_expectancy_group}")
        return [] # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞

    filtered_cats = []
    for item in cat_data:
        try:
            weight = float(item.get("weight_of_the_cat", 0.0))  # Default to 0.0 if missing
            life_expectancy = float(item.get("life_expectancy", 0.0)) # Default to 0.0 if missing

            if (
                item.get("care") == care
                and item.get("activity") == activity
                and min_value <= weight <= max_value
                and mini_value <= life_expectancy <= maxi_value
            ):
                filtered_cats.append(item)
        except (ValueError, TypeError) as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–∫–∏ (ID: {item.get('id', 'N/A')}): {e}")

    return filtered_cats


def new_cat(update: Update, context: CallbackContext, formatted_values: List[str]) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /new_cat.  –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–æ—à–∫–∞—Ö, —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –∏—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Ä–æ–¥.

    Args:
        update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram.
        context: –û–±—ä–µ–∫—Ç CallbackContext –æ—Ç telegram.ext.
        charlie_list: –°–ø–∏—Å–æ–∫, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ—à–∫–∏ (–∑–∞–º–µ–Ω–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ).
        URL: URL API.
        formatted_values: –°–ø–∏—Å–æ–∫ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
    """

    cat_data = fetch_cat_data(URL)  #  –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ—à–∫–∞—Ö

    if not cat_data:
        update.callback_query.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–æ—à–∫–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return


    filtered_cats = filter_cats(cat_data, formatted_values) # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ—à–µ–∫

    if not filtered_cats:
        update.callback_query.message.reply_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—à–µ–∫, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞."
        )
        return

    #  –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø–æ—Ä–æ–¥
    inline_keyboard = [
        [InlineKeyboardButton(element['breed'], callback_data=f"breed_{element['id']}")]
        for element in filtered_cats
    ]

    #  –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    update.callback_query.message.reply_text(
        '–û—Ç–ª–∏—á–Ω–æ!\n\n –û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö, —è –ø–æ–¥–æ–±—Ä–∞–ª –¥–ª—è –≤–∞—Å –ø–æ—Ä–æ–¥—ã –∫–æ—à–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ,'
        '—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –≤–∞–º –ø–æ–Ω—Ä–∞–≤—è—Ç—Å—è. –Ø —É—á–µ–ª –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —Ä–∞–∑–º–µ—Ä—É –∏ –¥—Ä—É–≥–∏–º –≤–∞–∂–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º.\n\n'
        '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ!',
        reply_markup=InlineKeyboardMarkup(inline_keyboard)
    )


def wake_up(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    chat = update.effective_chat
    name = update.message.chat.first_name
    context.bot.send_message(
        chat_id=chat.id, text=WELCOME_MESSAGE.format(name), reply_markup=MAIN_KEYBOARD
    )


def start_questionnaire(update: Update, context: CallbackContext) -> None:
     """
     –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ù–∞—á–∞—Ç—å". –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–ø—Ä–æ—Å.
     """
     # Clear previous answers before starting a new questionnaire
     FORMATTED_VALUES.clear()  # Clear formatted values when starting
     Questionnaire(update, context, 1)  # Start with the first question


def Questionnaire(update: Update, context: CallbackContext, index: int) -> None:
    """
    –ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    question = QUESTIONS[index]
    chat = update.effective_chat
    inline_keyboard = [
        [InlineKeyboardButton(answer, callback_data=f"question_{index}_{values}")]
        for answer, values in zip(question["answers"], question["callback_values"].keys())
    ]  # Access keys instead of values directly

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    if update.message:
        context.bot.send_message(chat_id=chat.id, text='–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–Ω–µ–º!')
        update.message.reply_text(question["text"], reply_markup=InlineKeyboardMarkup(inline_keyboard))
    elif update.callback_query:
        update.callback_query.message.reply_text(question["text"], reply_markup=InlineKeyboardMarkup(inline_keyboard))


def process_button(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –æ–ø—Ä–æ—Å.
    """
    query = update.callback_query
    query.answer()

    data = query.data

    if data.startswith('page:'):
        page = int(data.split(':')[1])
        All_breeds(update, context, page)
        logger.warning("–§—É–Ω–∫—Ü–∏—è say_his –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.")
    elif data.startswith('question'):
        answer(update, context) 
        logger.warning("–§—É–Ω–∫—Ü–∏—è answer –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.")
    elif data.startswith('breed'):
        answered(update, context) 
        logger.warning("–§—É–Ω–∫—Ü–∏—è answered –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.")



def show_breed_info(update: Update, context: CallbackContext, breed_id: int):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ—Ä–æ–¥–µ –∫–æ—à–µ–∫.
    """
    chat = update.effective_chat
    query = update.callback_query
    query.answer()

    try:
        response = requests.get(URL).json()  # Get all cat data

        # Ensure breed_id is valid
        if breed_id < 1 or breed_id > len(response):
            logger.error(f"Invalid breed_id: {breed_id}")
            query.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω–æ–π –ø–æ—Ä–æ–¥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return
        cat_data = response[breed_id - 1] # Access directly by index
        caption = (
            "1. –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
            f"    –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã: <b>{cat_data.get('breed')}</b>\n"
            f"    –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏: <b>{cat_data.get('life_expectancy')} –ª–µ—Ç</b>.\n\n\n"
            "2. –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ—Ä–æ–¥—ã:\n"
            f"    –†–∞–∑–º–µ—Ä: <b>{cat_data.get('weight_of_the_cat')} –∫–≥</b>\n"
            f"    –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: <b>{cat_data.get('activity')}</b>\n"
            f"    –®–µ—Ä—Å—Ç—å: <b>{cat_data.get('Wool')}</b>\n"
            f"    –õ–∏–Ω—å–∫–∞: <b>{cat_data.get('Molting')}</b>\n"
            f"    –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –¥–µ—Ç—è–º: <b>{cat_data.get('Attitude_towards_children')}</b>\n"
            f"    –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –¥—Ä—É–≥–∏–º –∂–∏–≤–æ—Ç–Ω—ã–º: <b>{cat_data.get('Attitude_towards_other_animals')}</b>\n"
            f"    –£—Ä–æ–≤–µ–Ω—å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞: <b>{cat_data.get('The_level_of_intelligence')}</b>\n"
            f"    –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤–æ –≤–Ω–∏–º–∞–Ω–∏–∏: <b>{cat_data.get('The_need_for_attention')}</b>\n\n\n"
            "3. –£—Ö–æ–¥ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n"
            f"    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —É—Ö–æ–¥–∞ –∑–∞ —à–µ—Ä—Å—Ç—å—é: <b>{cat_data.get('care')}</b>\n"
            f"    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–∏—Ç–∞–Ω–∏—è: <b>{cat_data.get('Nutrition_features')}</b>\n"
        )

        context.bot.send_photo(
            chat_id=chat.id, photo=cat_data.get('image'), caption=caption, parse_mode='HTML'
        )

    except requests.exceptions.RequestException as e:
        logger.error(f"Error fetching cat {e}")
        query.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.exception(f"Unexpected error in show_breed_info: {e}")
        query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        query.edit_message_reply_markup(reply_markup=None)  # Remove inline keyboard


def answer(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç—ã.
    """
    global FORMATTED_VALUES  # Access the global variable
    query = update.callback_query
    query.answer()

    try:
        _, index, answer = query.data.split("_", 2)
        index = int(index)

        if index not in QUESTIONS:
            logger.error(f"Invalid qid: {index}")
            query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ.")
            return

        question = QUESTIONS[index]
        formatted_answers = []
        for answer_key, answer_text in zip(question["callback_values"].keys(), question["answers"]):
            if answer_key == answer:
                formatted_line = answer_text + " ‚úÖ \n"  # Mark selected answer
                formatted_value = question["callback_values"][answer_key]
                # Append the value, not the key
                FORMATTED_VALUES.append(formatted_value)
            else:
                formatted_line = answer_text + "\n"

            formatted_answers.append(formatted_line)
        logger.info(f"Current answers: {FORMATTED_VALUES}")  # Log the answers
        formatted_text = "".join(formatted_answers)
        query.edit_message_text(text=f"{question['text']}\n\n{formatted_text}", reply_markup=None)

        if index < len(QUESTIONS):
            Questionnaire(update, context, index + 1)  # Ask the next question
        else:
            new_cat(update, context, FORMATTED_VALUES)

    except Exception as e:
        logger.exception(f"Error processing answer: {e}")
        query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


def answered(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ—Ä–æ–¥—ã –∫–æ—à–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π.
    """

    query = update.callback_query
    query.answer()

    try:
        _, breed_id = query.data.split("_", 1)
        breed_id = int(breed_id)

        show_breed_info(update, context, breed_id)
    except ValueError:
        logger.error("Invalid breed_id format.")
        query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ—Ä–æ–¥—ã.")
    except Exception as e:
        logger.exception(f"Error processing breed selection: {e}")
        query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ä–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def fetch_cat_breeds() -> List[dict]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Ä–æ–¥–µ –∫–æ—à–µ–∫ –∏–∑ API, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏.
    """
    try:
        response = requests.get(URL)
        response.raise_for_status()  # Raise HTTPError for bad responses (4xx or 5xx)
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"Error fetching cat breeds from API: {e}")
        return []

def All_breeds(update: Update, context: CallbackContext, page: int = 0) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–¥ –∫–æ—à–µ–∫.
    """
    cat_breeds = fetch_cat_breeds()

    if not cat_breeds:
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–¥ –∫–æ—à–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return

    chat_id = update.effective_chat.id
    start_index = page * BREEDS_PER_PAGE
    end_index = start_index + BREEDS_PER_PAGE
    breeds_on_page = cat_breeds[start_index:end_index]

    inline_keyboard = []
    for element in breeds_on_page:
        inline_keyboard.append([InlineKeyboardButton(element['breed'], callback_data=f"breed_{element['id']}")])

    navigation_buttons = []
    if page > 0:
        navigation_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page:{page - 1}"))
    if end_index < len(cat_breeds):
        navigation_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"page:{page + 1}"))

    if navigation_buttons:
        inline_keyboard.append(navigation_buttons)

    reply_markup = InlineKeyboardMarkup(inline_keyboard)

    total_pages = (len(cat_breeds) + BREEDS_PER_PAGE - 1) // BREEDS_PER_PAGE  # Calculate total pages

    text = f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä–æ–¥—É –∫–æ—à–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}):"

    try:
        if update.callback_query:
            update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        else:
            context.bot.send_message(chat_id, text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"Error sending breeds list message: {e}")



def Useful_articles(update: Update, context: CallbackContext) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –ø–æ —É—Ö–æ–¥—É –∑–∞ –∫–æ—à–∫–∞–º–∏.
    """

    inline_keyboard = [
        [InlineKeyboardButton('–£—Ö–æ–¥ –∑–∞ –∫–æ—à–∫–∞–º–∏', url="https://www.purinaone.ru/cat/articles/new-owner-tips/kak-uhazhivat-za-koshkoj")],
        [InlineKeyboardButton('–ö–æ—Ä–º–ª–µ–Ω–∏–µ', url="https://www.purinaone.ru/cat/articles/nutrition")],
        [InlineKeyboardButton('–ó–¥–æ—Ä–æ–≤—å–µ', url="https://www.proplan.ru/vet-diets/article/chto-nuzhno-znat-o-zdorov-ie-koshki-samostoiatiel-noie-nabliudieniie-i-profilaktichieskii-osmotr")],
        [InlineKeyboardButton('–í–æ—Å–ø–∏—Ç–∞–Ω–∏–µ', url="https://www.purinaone.ru/cat/articles/new-owner-tips/kak-vospitat-kotenka")]
    ]

    reply_markup = InlineKeyboardMarkup(inline_keyboard)

    try:
        update.message.reply_text(
            text='–ó–∞–±–æ—Ç–∞ –æ –∫–æ—à–∫–µ ‚Äì —ç—Ç–æ –±–æ–ª—å—à–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.\n\n–ú—ã —Å–æ–±—Ä–∞–ª–∏ –¥–ª—è —Ç–µ–±—è –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Ç–∞—Ç—å–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –µ–π —Å—á–∞—Å—Ç–ª–∏–≤—É—é –∏ –∑–¥–æ—Ä–æ–≤—É—é –∂–∏–∑–Ω—å:',
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"Error sending care articles message: {e}")


# Define the error handler
def error_handler(update: Update, context: CallbackContext):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –æ—à–∏–±–∫–∏, –≤—ã–∑–≤–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏.
    """
    logger.error(f"Update {update} caused error {context.error}")


def main():
    updater.dispatcher.add_handler(CommandHandler('start', wake_up))
    updater.dispatcher.add_handler(MessageHandler(Filters.text("–ù–∞—á–∞—Ç—å"), start_questionnaire))
    updater.dispatcher.add_handler(MessageHandler(Filters.text("–í—Å–µ –ø–æ—Ä–æ–¥—ã"), All_breeds))
    updater.dispatcher.add_handler(MessageHandler(Filters.text("–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –æ–± —É—Ö–æ–¥–µ"), Useful_articles))
    updater.dispatcher.add_handler(CallbackQueryHandler(process_button))
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main() 